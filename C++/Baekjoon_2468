#include <bits/stdc++.h>

using namespace std;
const int MAX_N = 100;
int n, ret, m = -1;
int arr[MAX_N][MAX_N];
int my[4] = {-1, 0, 1, 0};
int mx[4] = {0, -1, 0, 1};

void dfs(int y, int x, int arr[][MAX_N]){
	arr[y][x] = 0;
	for(int i = 0; i < 4; i++){
		int ny = y + my[i];
		int nx = x + mx[i];
		if(ny < 0 || ny >= n || nx < 0 || nx >= n) continue;
		if(arr[ny][nx] == 0) continue;
		dfs(ny, nx, arr);
	}
	
}

int main(){
	cin >> n;
	for(int i = 0; i < n; i ++){
		for(int j = 0; j < n; j++){
			cin >> arr[i][j];
			m = max(m, arr[i][j]);
		}
	}
	// 0 ~ m까지 잠기는 경우 
	for(int i = 0; i < m; i++){
		int cnt = 0;
		int check[MAX_N][MAX_N] = {0, };
		for(int j = 0; j < n; j++){
			for(int k = 0; k < n; k++){
				if(arr[j][k] > i) check[j][k] = 1;
			}
		}
		for(int j = 0; j < n; j++){
			for(int k = 0; k < n; k++){
				if(check[j][k] == 1){
					cnt++;
					dfs(j, k, check);
				}
			}
		}
		ret = max(ret, cnt);	
	}
	cout << ret << "\n";
}
	
	
